/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 floor-plan.glb --types --transform --shadows --keepnames --draco . 
Files: floor-plan.glb [7.59MB] > /Users/Carsten.Hoyer/Workspace/glyptoteket/public/floor-plan-transformed.glb [792.41KB] (90%)
Author: Boxy Construction (https://sketchfab.com/boxyconstruction)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/smart-home-interior-floor-plan-e5e490ebe0554422a99e945126642b24
Title: Smart Home Interior Floor Plan
*/
// @ts-nocheck
import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Group } from "three";

type GLTFResult = GLTF & {
  nodes: {
    Object001_Object001_mtl_0: THREE.Mesh;
    Object002_Object002_mtl_0: THREE.Mesh;
    Object003_Object003_mtl_0: THREE.Mesh;
    Object004_Object004_mtl_0: THREE.Mesh;
  };
  materials: {
    Object001_mtl: THREE.MeshStandardMaterial;
    Object002_mtl: THREE.MeshStandardMaterial;
    Object003_mtl: THREE.MeshStandardMaterial;
    Object004_mtl: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const [isVisible, setIsVisible] = useState(false);
  const groupRef = useRef<Group>(null);

  const material = new THREE.MeshPhongMaterial({ color: "red" });

  const { nodes, materials } = useGLTF(
    "/floor-plan-transformed.glb",
    "."
  ) as GLTFResult;

  // useEffect(() => {
  //   const boundingBox = new THREE.Box3().setFromObject(groupRef.current!);
  //   const size = new THREE.Vector3();
  //   boundingBox.getSize(size);
  //   groupRef.current!.position.set(size.x / 2, 0, size.z / 4);
  //   setIsVisible(true);
  // }, []);

  return (
    <group
      {...props}
      ref={groupRef}
      dispose={null}
      visible={true}
      // scale={[29.77, 29.77, 29.77]}
    >
      <mesh
        name="Object001_Object001_mtl_0"
        castShadow
        receiveShadow
        geometry={nodes.Object001_Object001_mtl_0.geometry}
        material={materials.Object001_mtl}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.025}
      />
      <mesh
        name="Object002_Object002_mtl_0"
        castShadow
        receiveShadow
        geometry={nodes.Object002_Object002_mtl_0.geometry}
        material={materials.Object002_mtl}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.025}
      />
      <mesh
        name="Object003_Object003_mtl_0"
        castShadow
        receiveShadow
        geometry={nodes.Object003_Object003_mtl_0.geometry}
        material={materials.Object003_mtl}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.025}
      />
      <mesh
        name="Object004_Object004_mtl_0"
        castShadow
        receiveShadow
        geometry={nodes.Object004_Object004_mtl_0.geometry}
        material={materials.Object004_mtl}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.025}
      />
    </group>
  );
}

useGLTF.preload("/floor-plan-transformed.glb");
